// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  company       String?
  role          String    @default("USER")
  plan          String    @default("STARTER")
  credits       Int       @default(1000)
  creditsUsed   Int       @default(0)
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  analyses      Analysis[]
  integrations  Integration[]
  reports       Report[]
  notifications Notification[]
  teamMembers   TeamMember[]
  apiKeys       ApiKey[]
  webhooks      Webhook[]
  payments      Payment[]

  @@index([email])
  @@index([role])
  @@index([plan])
  @@index([isActive])
}



model TeamMember {
  id        String      @id @default(cuid())
  userId    String
  teamId    String
  role      String      @default("MEMBER")
  joinedAt  DateTime    @default(now())
  
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  team      Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  
  @@unique([userId, teamId])
  @@index([userId])
  @@index([teamId])
}



model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  members     TeamMember[]
  projects    Project[]

  @@index([name])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([token])
  @@index([expires])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  figmaUrl    String?
  figmaFileId String?
  status      String        @default("ACTIVE")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  teamId      String?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  team        Team?    @relation(fields: [teamId], references: [id])
  analyses    Analysis[]
  integrations ProjectIntegration[]
}

model Analysis {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      String         @default("PENDING")
  progress    Int      @default(0)
  result      String?
  insights    String?
  recommendations String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?
  
  userId      String
  projectId   String
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  reports     Report[]
  logs        AnalysisLog[]
}

model AnalysisLog {
  id         String   @id @default(cuid())
  level      String  @default("INFO")
  message    String
  data       String?
  createdAt  DateTime @default(now())
  
  analysisId String
  analysis   Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
}

model Integration {
  id          String   @id @default(cuid())
  type        String
  name        String
  config      String
  status      String            @default("ACTIVE")
  lastSync    DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectIntegrations ProjectIntegration[]
  logs        IntegrationLog[]
}

model ProjectIntegration {
  id            String @id @default(cuid())
  projectId     String
  integrationId String
  
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, integrationId])
}

model Report {
  id          String   @id @default(cuid())
  name        String
  type        String
  content     String
  status      String        @default("DRAFT")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String
  analysisId  String?
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  analysis    Analysis? @relation(fields: [analysisId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  title     String
  message   String
  data      String?
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  
  userId    String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ApiKey {
  id        String   @id @default(cuid())
  name      String
  key       String   @unique
  permissions String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  lastUsed  DateTime?
  
  userId    String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Webhook {
  id        String   @id @default(cuid())
  name      String
  url       String
  events    String
  secret    String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  userId    String
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                String   @id @default(cuid())
  userId            String
  stripeCustomerId  String?
  stripeSubscriptionId String?
  plan              String
  status            String
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd Boolean @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Usage {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  credits   Int
  analyses  Int
  createdAt DateTime @default(now())
  
  @@unique([userId, date])
}

model Payment {
  id            String        @id @default(cuid())
  userId        String
  amount        Float
  currency      String        @default("USD")
  status        String        @default("PENDING")
  paymentMethod String        @default("PAYPAL")
  paymentId     String?       // PayPal order ID
  description   String?
  completedAt   DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model IntegrationLog {
  id            String   @id @default(cuid())
  integrationId String
  type          String
  message       String
  data          String?  // JSON string
  timestamp     DateTime @default(now())
  
  integration   Integration @relation(fields: [integrationId], references: [id], onDelete: Cascade)
}

 